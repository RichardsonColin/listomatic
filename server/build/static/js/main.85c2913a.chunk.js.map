{"version":3,"sources":["components/Nav.tsx","components/SearchForm.tsx","components/Quote.tsx","components/TradingList.tsx","components/Exchange.tsx","components/DonationAddress.tsx","components/Donate.tsx","components/Footer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","className","SearchForm","props","onSubmit","evt","preventDefault","setLimit","setExchangesList","fetchExchanges","filter","type","placeholder","value","onChange","setFilter","target","onBlur","undefined","length","Quote","onClick","fetchTradingPairs","exchange_id","id","symbol","CopyToClipboard","require","TradingList","list","document","queryCommandSupported","text","Exchange","useState","quoteList","setQuoteList","tradingPairsList","setTradingPairsList","fetchQuotes","exchangeId","a","fetch","then","res","json","quotes","map","pair","quoteId","tradingPairs","sort","b","asset_symbol","localeCompare","tradingPair","index","exchange_name","toUpperCase","quote_symbol","join","useEffect","updated","Date","last_addition","toDateString","image","href","url","src","alt","name","parseFloat","volume_24_hour","toFixed","toString","replace","grade","quote","key","origin","DonationAddress","copySuccess","setCopySuccess","address","onCopy","setTimeout","ADDRESSES","Donate","donationAddresses","setDonationAddresses","displayDonations","setDisplayDonations","delayShown","setDelayShown","role","aria-label","Footer","App","exchangesList","limit","isFetching","setIsFetching","maxReached","setMaxReached","scrollElm","useRef","limitTotal","String","limitFrom","queryString","URLSearchParams","fetchedExchanges","exchanges","ref","onScroll","scrollHeight","offsetHeight","scrollPosition","scrollTop","newLimit","exchange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85c2913a.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/nav.css';\n\nfunction Nav() {\n  return (\n    <nav className=\"nav\">\n      <h2>Listomatic</h2>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react'\nimport '../css/search-form.css';\n\ninterface SearchFormProps {\n  setLimit: any,\n  setExchangesList: any,\n  filter: string,\n  setFilter: any,\n  fetchExchanges: (filter: string, limit: number) => void;\n}\n\nfunction SearchForm(props: SearchFormProps) {\n\n  const handleSubmit = (evt: any) => {\n    evt.preventDefault()\n    props.setLimit(0)\n    props.setExchangesList([])\n    props.fetchExchanges(props.filter, 0)\n  }\n\n  const handleChange = (evt: any) => {\n    props.setFilter(evt.target.value)\n  }\n\n  const handleBlur = (evt: any) => {\n    if (props.filter !== undefined && !props.filter.length) {\n      props.setLimit(0)\n      props.setExchangesList([])\n      props.fetchExchanges(props.filter, 0)\n    }\n  }\n\n  return (\n    <div className=\"search-form-container\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          Filter exchanges:\n          <input\n            type=\"text\"\n            placeholder=\"Exchange name\"\n            value={props.filter}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          />\n        </label>\n        <button className=\"main-btn\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SearchForm;\n","import React from 'react'\nimport '../css/quote.css';\n\ninterface QuoteProps {\n  id: string;\n  exchange_id: string;\n  symbol: string;\n  updated_at: string;\n  fetchTradingPairs: (exchange_id: string, quoteId: string) => void;\n}\n\nfunction Quote(props: QuoteProps) {\n  return (\n    <div>\n      <button className=\"alt-btn\"\n        onClick={() => props.fetchTradingPairs(props.exchange_id, props.id)}\n      >{props.symbol}</button>\n    </div>\n  )\n}\n\nexport default Quote;\n","import React from 'react'\nimport '../css/trading-list.css';\nconst CopyToClipboard = require('react-copy-to-clipboard')\n/*\n  TODO:\n   - Fix CopyToClip dependency\n   - Add copied notification\n   - Add download functionality\n*/\n\n\ninterface TradingListProps {\n  list: string;\n}\n\nfunction TradingList(props: TradingListProps) {\n  // const [copySuccess, setCopySuccess] = useState(false)\n\n  return (\n    <div className={`textarea-container ${props.list.length ? 'fade-in' : 'fade-out'}`}>\n      {props.list.length &&\n        <div className=\"textarea-wrap\">\n          <div>\n            {document.queryCommandSupported('copy') &&\n              <CopyToClipboard text={props.list}\n              // onCopy={() => { setCopySuccess(true) }}\n              >\n                <button>Copy</button>\n              </CopyToClipboard>\n            }\n            {/* <button>Download</button> */}\n          </div>\n          <textarea\n            value={props.list}\n            onChange={evt => null}\n          />\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TradingList;\n","import React, { useEffect, useState } from 'react'\nimport Quote from './Quote'\nimport TradingList from './TradingList'\nimport '../css/exchange.css';\n\ninterface QuoteUI {\n  id: string;\n  exchange_id: string;\n  symbol: string;\n  updated_at: string;\n}\n\ninterface ExchangeProps {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  image: string;\n  origin: string;\n  grade: string;\n  volume_24_hour: string;\n  updated_at: string;\n  last_addition: string;\n}\n\nfunction Exchange(props: ExchangeProps) {\n  const [quoteList, setQuoteList] = useState<QuoteUI[]>([])\n  const [tradingPairsList, setTradingPairsList] = useState('')\n\n  const fetchQuotes = async (exchangeId: string) => {\n    const quotes = await fetch(`/exchanges/${exchangeId}/assets`)\n      .then(res => res.json())\n    quotes.map((pair: any) => pair.exchange_id = exchangeId)\n\n    setQuoteList(quotes)\n  }\n\n  const fetchTradingPairs = async (exchangeId: string, quoteId: string) => {\n    const tradingPairs = await fetch(`/exchanges/${exchangeId}/assets/${quoteId}/cryptocurrencies`)\n      .then(res => res.json())\n    // sort alphabetically by cryptocurrency symbol, map to strings (e.g. 'BINANCE:DCRUSDT'), format as single string\n    const tradingPairsList = tradingPairs\n      .sort((a: any, b: any) => a.asset_symbol.localeCompare(b.asset_symbol))\n      .map((tradingPair: any, index: number) =>\n        `${tradingPair.exchange_name.toUpperCase()}:${tradingPair.asset_symbol.toUpperCase()}${tradingPair.quote_symbol.toUpperCase()}`\n      )\n      .join(',')\n    setTradingPairsList(tradingPairsList)\n  }\n\n  // TODO: export as helper\n  const numberWithCommas = (x: any) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  useEffect(() => {\n    fetchQuotes(props.id)\n  }, [])\n\n  const updated = new Date(props.last_addition).toDateString()\n  return (\n    <article className=\"exchange\">\n      <header>\n        <div>\n          {\n            props.image !== null &&\n            <a href={props.url} target=\"#\">\n              <img src={props.image} alt={`logo for ${props.name}`} />\n            </a>\n          }\n          <h2>{props.name}</h2>\n        </div>\n        <div>\n          <span>\n            <strong>24Hr Volume</strong>: {parseFloat(props.volume_24_hour) > 0 ?\n              `${numberWithCommas(parseFloat(props.volume_24_hour).toFixed(0))} BTC` :\n              'Unknown'}\n          </span>\n          <span>\n            <strong>Rating</strong>: {props.grade !== null ?\n              `${props.grade}/10` :\n              '-'}\n          </span>\n        </div>\n      </header>\n      <main>\n        <div className=\"exchange-pairs-container\">\n          {quoteList.length > 0 &&\n            quoteList.map((quote: QuoteUI) => (\n              <Quote key={quote.id} {...quote} fetchTradingPairs={fetchTradingPairs} />\n            ))\n          }\n        </div>\n        {/* TODO: make into component */}\n        <TradingList list={tradingPairsList} />\n      </main>\n      <footer>\n        <span><strong>Origin</strong>: {props.origin || 'Unknown'}</span>\n        <span><strong>Last Trading Pair Added</strong>: {updated}</span>\n      </footer>\n    </article>\n  )\n}\n\nexport default Exchange;\n","import React, { useState } from 'react'\nimport '../css/donation-address.css';\nconst CopyToClipboard = require('react-copy-to-clipboard')\n\n// TODO: Complete copy functionality\n\ninterface DonationAddressProps {\n  id: number;\n  name: string\n  address: string;\n}\n\nfunction DonationAddress(props: DonationAddressProps) {\n  const [copySuccess, setCopySuccess] = useState(false)\n\n  const handleCopy = (evt: any) => {\n    setTimeout(() => {\n      setCopySuccess(false)\n    }, 75);\n  }\n\n  return (\n    <div className=\"donation-address\">\n      <div>\n        <p>\n          <strong>{props.name}: </strong>\n          <span className={`donation-address ${copySuccess ? 'highlight' : ''}`}>{props.address}</span>\n        </p>\n        {document.queryCommandSupported('copy') &&\n          <CopyToClipboard text={props.address}\n            onCopy={() => { setCopySuccess(true) }}\n          >\n            <button className=\"alt-2-btn\" onClick={(evt) => { handleCopy(evt) }}>Copy</button>\n          </CopyToClipboard>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default DonationAddress;\n","import React, { useState, useEffect } from 'react'\nimport DonationAddress from './DonationAddress'\nimport '../css/donate.css';\n\nconst ADDRESSES = [\n  { id: 1, name: 'BTC', address: '1P2jyC5MvnsWZvidRmp7oQXAiCpsox9iVf' },\n  { id: 2, name: 'LTC', address: 'LQwW9UVgLxv9iV5qewKp9yiDgFqtwuY5jy' },\n  { id: 3, name: 'ETH', address: '0xaef3256056aab079f06e424b3ac2608b0184f120' }\n]\n\ninterface DonationAddressUI {\n  id: number;\n  name: string;\n  address: string;\n}\n\nfunction Donate() {\n  const [donationAddresses, setDonationAddresses] = useState<DonationAddressUI[]>([])\n  const [displayDonations, setDisplayDonations] = useState(false)\n  const [delayShown, setDelayShown] = useState(false)\n\n  const getDonationAddresses = () => {\n    setDonationAddresses(ADDRESSES)\n  }\n\n  const handleDisplayDonations = () => {\n    setDisplayDonations(!displayDonations)\n    setTimeout(() => {\n      setDelayShown(!displayDonations)\n    }, 250);\n  }\n\n  useEffect(() => {\n    getDonationAddresses()\n  }, [])\n\n  return (\n    <div>\n      <button\n        className=\"donate-btn main-btn\"\n        onClick={() => { handleDisplayDonations() }}\n      >{displayDonations ? 'Nah, nm' : 'Donate'}</button>\n      <section className={`donate-container ${displayDonations ? 'slideUp' : 'slideDown'} ${delayShown ? '' : 'hide'}`}>\n        <div className=\"content-center\">\n          <p>\n            <span className=\"html-ent\" role=\"img\" aria-label=\"coffee\">&#x2615;</span><span>and</span><span className=\"html-ent\" role=\"img\" aria-label=\"beer\">&#x1f37a;</span><span>fund.</span>\n          </p>\n          <div className=\"wallet-sources\">\n            {donationAddresses.length > 0 &&\n              donationAddresses.map((address: DonationAddressUI) => (\n                <DonationAddress key={address.id} {...address} />\n              ))\n            }\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default Donate;\n","import React from 'react'\nimport '../css/footer.css';\n\nfunction Footer() {\n  return (\n    <footer className=\"app-footer\">\n      <div className=\"content-center\">\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React, { useEffect, useState, useRef } from 'react'\nimport Nav from './Nav'\nimport SearchForm from './SearchForm'\nimport Exchange from './Exchange'\nimport Donate from './Donate'\nimport Footer from './Footer'\n\n// TODO: App wide - implement general hooks\n\nconst QUERY_LIMIT = 20\n\ninterface ExchangeUI {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  image: string;\n  origin: string;\n  grade: string;\n  volume_24_hour: string;\n  updated_at: string;\n  last_addition: string;\n}\n\nfunction App() {\n  // Prepare state hook for exchanges list\n  const [exchangesList, setExchangesList] = useState<ExchangeUI[]>([])\n  // Manages infinite scroll items\n  const [filter, setFilter] = useState('')\n  const [limit, setLimit] = useState(0)\n  const [isFetching, setIsFetching] = useState(false)\n  const [maxReached, setMaxReached] = useState(false)\n  const scrollElm: any = useRef(null)\n\n  // Create async function for fetching exchanges list\n  const fetchExchanges = async (filter: string, limit: number) => {\n    setIsFetching(true)\n    setMaxReached(false)\n    // TODO: refactor querystring creation\n    let limitTotal = String(QUERY_LIMIT)\n    let limitFrom = String(limit)\n    let params = { filter, limitFrom, limitTotal }\n    let queryString = new URLSearchParams(params).toString()\n    let url = `/exchanges?${queryString}`\n\n    const fetchedExchanges = await fetch(url)\n      .then(res => res.json())\n    // Update exchangesList state\n    if (fetchedExchanges.length) {\n      setExchangesList(exchanges => [...exchanges, ...fetchedExchanges])\n    } else {\n      setMaxReached(true)\n    }\n    setIsFetching(false)\n  }\n\n  const fetchMoreExchanges = () => {\n    setLimit(limit => {\n      let newLimit = limit + QUERY_LIMIT\n      fetchExchanges(filter, newLimit)\n      return newLimit\n    })\n  }\n\n  const onScroll = (evt: any) => {\n    let scrollHeight = evt.target.scrollHeight - evt.target.offsetHeight\n    let scrollPosition = evt.target.scrollTop\n\n    if (!isFetching && !maxReached) {\n      // Fetch if 95% scrolled\n      (scrollPosition / scrollHeight) * 100 > 95 && fetchMoreExchanges()\n    }\n  }\n\n  useEffect(() => {\n    fetchExchanges(filter, limit)\n  }, [])\n\n  return (\n    <div className=\"app\">\n      <Nav />\n      <header className=\"app-header\">\n        <div className=\"content-center\">\n          <SearchForm\n            setLimit={setLimit}\n            filter={filter}\n            setFilter={setFilter}\n            setExchangesList={setExchangesList}\n            fetchExchanges={fetchExchanges}\n          />\n        </div>\n        {/* <button className=\"main-btn\" onClick={fetchExchanges}>Fetch exchanges</button> */}\n      </header>\n      <main className=\"app-main\" ref={scrollElm} onScroll={onScroll}>\n        <div className=\"content-center\">\n          {exchangesList.length > 0 &&\n            exchangesList.map((exchange: ExchangeUI) => (\n              <Exchange key={exchange.id} {...exchange} />\n            ))\n          }\n        </div>\n      </main>\n      <Donate />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}